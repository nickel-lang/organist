let builders = import "../builders.ncl" in
let derivation = import "../derivation.ncl" in
let nix_builtins = import "../builtins.ncl" in
let Bash = import "./bash.ncl" in

let
# Haskell Language Server (HLS) uses a different Ormolu version than the default one, and it's difficult to change it for now.
# See https://github.com/haskell/haskell-language-server/issues/411
# So we do the opposite: retrieve the Ormolu package transitively pulled by HLS.
# Note that Ormolu is a level 2 transitive dependency of HLS: `haskell-language-server` -> `hls-ormolu-plugin` -> `ormolu`
ormoluFromHls = fun hls =>
  derivation.CallNix
  & {
    function = m%"
      hls:
        let
          # Build the attrset of dependency packages of `p`
          getDependencies = p: builtins.listToAttrs
            (map (dependency: { name = dependency.pname; value = dependency; }) p.passthru.getBuildInputs.haskellBuildInputs);

          hlsDependencies = getDependencies hls;
          hlsOrmoluPluginDependencies = getDependencies hlsDependencies.hls-ormolu-plugin;
        in
        hlsOrmoluPluginDependencies.ormolu.bin
    "%,
    args = hls,
  }
in
let ghcPackageSet = fun ghcVersion =>
  if ghcVersion == "default" then
    "haskellPackages"
  else
    "haskell.packages.ghc%{ghcVersion}"
in
let StackProject = {
  name | String | default = "haskell-stack-shell",
  # ghc
  #   | derivation.Derivation
  #   | doc m%"
  #     The GHC derivation to use for building the project.
  #   "%,
  system_dependencies
    | doc m%"
      The system dependencies that are required for building the Haskell
      codebase.
    "%
    | { _ : derivation.Derivation }
    = {
      zlib = nix_builtins.import_nix "nixpkgs#zlib"
    },
  nixpkgs_path
    | doc m%"
      The path to the Nixpkgs repository to use for building the project
    "%,
  ..
}
in
let instantiate_stack_project | StackProject -> derivation.Derivation = fun project =>
    let project_json_file =
      derivation.NixToFile
      & {
        name = "stack-project.json",
        text = nix_builtins.builtin "toJSON" (std.record.remove "system_dependencies" project),
      }
    in
    derivation.NixToFile
    & {
      name = "stack-project.nix",
      text = nix-s%"
        let pkgs = import "%{project.nixpkgs_path}" {}; in
        { ghc }:
        pkgs.haskell.lib.buildStackProject
        ({
          inherit ghc;
        } // builtins.fromJSON (builtins.unsafeDiscardStringContext (builtins.readFile %{project_json_file})))
      "%,
    }
  in

Bash
& {
  build.ghcVersion
    | doc m%"
            The GHC version used in the build.
            Must be kept in sync with the one expected by Stack.
          "%
    | String
    | default
    = "default",
  build.stack_shell.stack_shell
    | doc m%"
      The derivation used to provide the environment in which to run
      Stack.

      See <https://docs.haskellstack.org/en/stable/nix_integration/#external-c-libraries-through-a-shellnix-file>
    "%
    | StackProject
    = {
      system_dependencies,
      nativeBuildInputs = std.record.values system_dependencies,
      nixpkgs_path = nix_builtins.import_nix "nixpkgs#path",
    },
  build.packages =
    let stack-wrapped =
      {
        name = "stack-wrapped",
        version = "1.0",
        build_command = {
          cmd = nix-s%"%{nix_builtins.import_nix "nixpkgs#bash"}/bin/bash"%,
          args = [
            "-c",
            nix-s%"
                  source .attrs.sh
                  export PATH='%{nix_builtins.import_nix "nixpkgs#coreutils"}/bin'":$PATH"
                  mkdir -p ${outputs[out]}/bin
                  echo "$0" > ${outputs[out]}/bin/stack
                  chmod a+x ${outputs[out]}/bin/*
                "%,
            nix-s%"
                  #!%{nix_builtins.import_nix "nixpkgs#bash"}/bin/bash
                  %{nix_builtins.import_nix "nixpkgs#stack"}/bin/stack \
                    --nix \
                    --no-nix-pure \
                    --nix-shell-file="%{instantiate_stack_project build.stack_shell.stack_shell}" \
                    --nix-path="nixpkgs=%{nix_builtins.import_nix "nixpkgs#path"}" \
                    "$@"
                "%,
          ],
        },
      }
        | builders.NickelPkg
    in
    {
      stack = stack-wrapped,
      stack' = nix_builtins.import_nix "nixpkgs#stack",
      nix = nix_builtins.import_nix "nixpkgs#nix",
      git = nix_builtins.import_nix "nixpkgs#git",
    },
  dev.ghcVersion | force = build.ghcVersion,
  dev.packages = {
    ormolu = ormoluFromHls haskell-language-server,
    haskell-language-server = nix_builtins.import_nix "nixpkgs#%{ghcPackageSet dev.ghcVersion}.haskell-language-server",
  },
}
