let files = import "../files.ncl" in
let flake = import "../flake.ncl" in
# Full schema, imported from https://taskfile.dev/schema.json.
# Used for validation, but no good for completion/hover because too complex
let validation_schema = import "./autogenerated-schema.ncl" in
let Task = {
  cmds
    | doc "A list of shell commands to be executed"
    | Array Dyn,
  deps
    | doc "A list of dependencies of this task. Tasks defined here will run in parallel before this task"
    | Array Dyn
    | optional,
  desc
    | doc "A short description of the task. This is displayed when calling task --list"
    | String
    | optional,
  ..
}
in
let Include = {
  taskfile
    | String
    | doc m%"
      The path for the Taskfile or directory to be included. If a directory, Task will look for files named `Taskfile.yml` or `Taskfile`.yaml inside that directory. If a relative path, resolved relative to the directory containing the including Taskfile.
    "%,
  optional
    | Bool
    | optional
    | doc m%"
      	If `true`, no errors will be thrown if the specified file does not exist.
    "%,
  ..
}
in
# Manual subset of the schema used for editor integration
let Taskfile = {
  version | Number | default = 3,
  tasks
    | doc "The tasks to run"
    | {
      _ | Task
    }
    = {},
  includes
    | doc "	Additional Taskfiles to be included"
    | optional
    | { _ | Include },
  ..
}
in
{
  Schema =
    flake.Schema
    & files.Schema
    & {
      tasks
        | doc m%%"
        Integration with [taskfile](https://taskfile.dev)
      "%%
        | {
          enable | Bool | default = false,
          config
            | doc m%%"
                The configuration for the task runner, as described in
                https://taskfile.dev/usage/.

                ## Example

                ```nickel
                {
                  version = "3", # Optional
                  tasks = {
                    assets.cmds = [
                      "esbuild --bundle --minify css/index.css > public/bundle.css"
                    ],
                    build.cmds = ["go build -v -i main.go"],
                  },

                  # Include a local taskfile if it exists to allow users
                  # to add their own lifecycle tasks
                  includes.local = "./Taskfile.local.yaml",
                  includes.local."optional" = true,
                }
                ```
              "%%
            | Taskfile
            | validation_schema,
        },
      files,
    },
  config | Schema
    = {
      tasks,
      tasks.config = {},
      files =
        if tasks.enable then
          {
            "Taskfile.yml".content = std.serialize 'Yaml tasks.config,
          }
        else
          {},
      shells.build.packages.go-task,
    }
}
