let inputs = import "./nickel.lock.ncl" in
let organist = inputs.organist in
let import_nix = organist.nix.import_nix in

organist.OrganistExpression
& {
  Schema,
  config | Schema = {

      shells =
        organist.shells.Bash
        & {
          build.packages = {
            nickel = import_nix "nixpkgs#nickel",
            parallel = import_nix "nixpkgs#parallel",
            gnused = import_nix "nixpkgs#gnused",
          },
        },

      apps.run-test =
        let testScript | organist.nix.builders.ShellApplication = {
            name = "run-test.sh",
            content.file = organist.nix.builtins.import_file "run-test.sh",
            runtime_inputs = {
              nickel = import_nix "nixpkgs#nickel",
              parallel = import_nix "nixpkgs#parallel",
              gnused = import_nix "nixpkgs#gnused",
            },
          }
          in
        {
          program | organist.nix.derivation.NixString = nix-s%"%{testScript}/bin/run-test.sh"%
        },

      packages = {
        # Re-exported to make it easy for downstream to depend on them
        nickel = import_nix "nixpkgs#nickel",
        nls = import_nix "nixpkgs#nls",
      },

      checks
        | { _ | organist.nix.builders.NixpkgsPkg }
        = {
          alejandra = {
            name = "check-alejandra",
            version = "0.0",
            env.buildCommand = nix-s%"
          %{import_nix "nixpkgs#alejandra"}/bin/alejandra --check %{import_nix "self"}
          touch $out
        "%,
          },

          nickel-format = {
            name = "check-nickel-format",
            version = "0.0",
            env.buildInputs.nickel = import_nix "nixpkgs#nickel",
            env.buildCommand = nix-s%"
          cd %{import_nix "self"}
          failed=""
          for f in $(find . -name future -prune -or -name '*.ncl' -print); do
            if ! diff -u "$f" <(nickel format < "$f"); then
              failed="$failed $f"
            fi
          done
          if [ "$failed" != "" ]; then
            echo "Following files need to be formatted: $failed"
            exit 1
          fi
          touch $out
        "%,
          },
        },

      checks = import "tests/main.ncl",

      files.".gitignore".materialisation_method = 'Copy,
      files.".gitignore".content = m%"
    # This file is generated by Organist, please don't edit directly
    /examples/*/result
    /result

  "%,
    },
} | organist.modules.T
